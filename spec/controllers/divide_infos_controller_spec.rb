require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe DivideInfosController do

  def mock_divide_info(stubs={})
    @mock_divide_info ||= mock_model(DivideInfo, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all divide_infos as @divide_infos" do
      DivideInfo.stub(:all) { [mock_divide_info] }
      get :index
      assigns(:divide_infos).should eq([mock_divide_info])
    end
  end

  describe "GET show" do
    it "assigns the requested divide_info as @divide_info" do
      DivideInfo.stub(:find).with("37") { mock_divide_info }
      get :show, :id => "37"
      assigns(:divide_info).should be(mock_divide_info)
    end
  end

  describe "GET new" do
    it "assigns a new divide_info as @divide_info" do
      DivideInfo.stub(:new) { mock_divide_info }
      get :new
      assigns(:divide_info).should be(mock_divide_info)
    end
  end

  describe "GET edit" do
    it "assigns the requested divide_info as @divide_info" do
      DivideInfo.stub(:find).with("37") { mock_divide_info }
      get :edit, :id => "37"
      assigns(:divide_info).should be(mock_divide_info)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created divide_info as @divide_info" do
        DivideInfo.stub(:new).with({'these' => 'params'}) { mock_divide_info(:save => true) }
        post :create, :divide_info => {'these' => 'params'}
        assigns(:divide_info).should be(mock_divide_info)
      end

      it "redirects to the created divide_info" do
        DivideInfo.stub(:new) { mock_divide_info(:save => true) }
        post :create, :divide_info => {}
        response.should redirect_to(divide_info_url(mock_divide_info))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved divide_info as @divide_info" do
        DivideInfo.stub(:new).with({'these' => 'params'}) { mock_divide_info(:save => false) }
        post :create, :divide_info => {'these' => 'params'}
        assigns(:divide_info).should be(mock_divide_info)
      end

      it "re-renders the 'new' template" do
        DivideInfo.stub(:new) { mock_divide_info(:save => false) }
        post :create, :divide_info => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested divide_info" do
        DivideInfo.stub(:find).with("37") { mock_divide_info }
        mock_divide_info.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :divide_info => {'these' => 'params'}
      end

      it "assigns the requested divide_info as @divide_info" do
        DivideInfo.stub(:find) { mock_divide_info(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:divide_info).should be(mock_divide_info)
      end

      it "redirects to the divide_info" do
        DivideInfo.stub(:find) { mock_divide_info(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(divide_info_url(mock_divide_info))
      end
    end

    describe "with invalid params" do
      it "assigns the divide_info as @divide_info" do
        DivideInfo.stub(:find) { mock_divide_info(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:divide_info).should be(mock_divide_info)
      end

      it "re-renders the 'edit' template" do
        DivideInfo.stub(:find) { mock_divide_info(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested divide_info" do
      DivideInfo.stub(:find).with("37") { mock_divide_info }
      mock_divide_info.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the divide_infos list" do
      DivideInfo.stub(:find) { mock_divide_info }
      delete :destroy, :id => "1"
      response.should redirect_to(divide_infos_url)
    end
  end

end
