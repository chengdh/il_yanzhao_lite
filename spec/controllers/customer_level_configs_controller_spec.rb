#coding: utf-8
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CustomerLevelConfigsController do
  login_admin
  render_views

  before(:each) do
    @customer_level_config = Factory(:customer_level_config)
  end


  describe "GET index" do
    it "assigns all customer_level_configs as @customer_level_configs" do
      get :index
      response.should be_success
    end
  end

  describe "GET show" do

    it "should be success" do
      get :show, :id => @customer_level_config
      response.should be_success
    end

    it "assigns the requested customer_level_config as @customer_level_config" do
      get :show, :id => @customer_level_config
      response.should render_template('show')
    end
  end

  describe "GET new" do
    it "should be success" do
      get :new
      response.should be_success
    end
  end

  describe "GET edit" do
    it "assigns the requested customer_level_config as @customer_level_config" do
      get :edit, :id => @customer_level_config
      response.should render_template('edit')
    end
  end

  describe "POST create" do
    before(:each) do
      @attr = Factory.build(:customer_level_config).attributes
    end
    describe "success" do
      it "能够成功保存票据信息" do
        lambda do
          post :create, :customer_level_config => @attr
        end.should change(CustomerLevelConfig,:count).by(1)
      end

      it "redirects to the created customer_level_config" do
        post :create, :customer_level_config => @attr
        response.should redirect_to(customer_level_config_path(assigns(:customer_level_config)))
      end
    end

    describe "with invalid params" do

      it "re-renders the 'new' template" do
        post :create, :customer_level_config => {}
        response.should render_template("new")
      end
    end

  end

  describe "PUT update" do
    before :each do
      @attr = {:name => 'updated name'}
    end

    describe "with valid params" do
      it "updates the requested customer_level_config" do
        put :update, :id => @customer_level_config, :customer_level_config => @attr 
        @customer_level_config.reload
        @customer_level_config.name.should == @attr[:name]
      end


      it "redirects to the customer_level_config" do
        put :update, :id => @customer_level_config,:customer_level_config => @attr
        response.should redirect_to(customer_level_config_path(@customer_level_config))
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        put :update, :id => @customer_level_config,:customer_level_config => {:name => nil}
        response.should render_template("edit")
      end
    end

  end

  describe "DELETE destroy" do
    it "destroys the requested customer_level_config" do
      lambda do
        delete :destroy, :id => @customer_level_config 
      end.should change(CustomerLevelConfig,:count).by(-1)
    end

    it "redirects to the customer_level_configs list" do
      delete :destroy, :id => @customer_level_config 
      response.should redirect_to(customer_level_configs_url)
    end
  end
end
